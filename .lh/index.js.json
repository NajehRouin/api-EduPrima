{
    "sourceFile": "index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1748285218284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748287607347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,8 +130,9 @@\n const AdminRoutes = require(\"./routes/Admin.Routes\");\r\n const NotificationRouter = require(\"./routes/Notification.routes\");\r\n const updateActivitesEtat = require(\"./config/cron\");\r\n const messageRouter = require(\"./routes/message.routes\");\r\n+const specialiteRouter=require('./routes/Specialite.routes')\r\n app.use(\"/api\", [\r\n   AdminRoutes,\r\n   EnseignantRouter,\r\n   EleveRouter,\r\n@@ -140,8 +141,9 @@\n   ActiviteRoutes,\r\n   SoumissionRoutes,\r\n   NotificationRouter,\r\n   messageRouter,\r\n+  specialiteRouter\r\n ]);\r\n \r\n //create admin if not exist\r\n \r\n"
                }
            ],
            "date": 1748285218284,
            "name": "Commit-0",
            "content": "const express = require(\"express\");\r\nconst connectDB = require(\"./config/db\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst cors = require(\"cors\");\r\nconst http = require(\"http\"); // 🧠 Nécessaire pour socket.io\r\nconst { Server } = require(\"socket.io\");\r\nconst cookieParser = require(\"cookie-parser\");\r\n\r\nconst bcrypt = require(\"bcrypt\");\r\nconst cron = require(\"node-cron\");\r\n\r\nconst app = express();\r\n\r\nconst server = http.createServer(app);\r\n\r\nconst io = new Server(server, {\r\n  cors: {\r\n    origin: \"http://localhost:3000\", // adapte ici aussi\r\n    credentials: true,\r\n  },\r\n});\r\n\r\n//  Export pour l'utiliser dans d'autres fichiers\r\nmodule.exports.io = io;\r\n// Stocker les sockets des utilisateurs connectés\r\nconst connectedUsers = new Map();\r\nmodule.exports.connectedUsers = connectedUsers;\r\n\r\nconst userSocketMap = {}; // Stocke la map entre l'utilisateur et son socketId\r\n\r\nmodule.exports.getReceiverSocketId = (receiverId, receiverModel) => {\r\n  return userSocketMap[`${receiverModel}:${receiverId}`];\r\n};\r\n// io.on(\"connection\", (socket) => {\r\n//   const userId = socket.handshake.query.userId;\r\n//   const userModel = socket.handshake.query.userModel;\r\n\r\n//   if (userId && userModel) {\r\n//     const key = `${userModel}:${userId}`;\r\n//     userSocketMap[key] = socket.id;\r\n//     console.log(\"connected:\", key, socket.id);\r\n//     io.emit(\"getOnlineUsers\", Object.keys(userSocketMap)); // Met à jour la liste des utilisateurs en ligne\r\n//   }\r\n\r\n//   socket.on(\"disconnect\", () => {\r\n//     const key = `${userModel}:${userId}`;\r\n//     delete userSocketMap[key];\r\n//     io.emit(\"getOnlineUsers\", Object.keys(userSocketMap)); // Met à jour la liste des utilisateurs en ligne\r\n//   });\r\n// });\r\n\r\n// //  Gérer la connexion socket\r\n// io.on(\"connection\", (socket) => {\r\n//   console.log(\" Nouveau client connecté\", socket.id);\r\n\r\n//   socket.on(\"registerUser\", (userId) => {\r\n//     connectedUsers.set(userId, socket.id);\r\n//     console.log(`✅ Utilisateur ${userId} enregistré avec socket ${socket.id}`);\r\n//   });\r\n\r\n//   socket.on(\"disconnect\", () => {\r\n//     console.log(\"❌ Client déconnecté\", socket.id);\r\n//     for (let [userId, socketId] of connectedUsers.entries()) {\r\n//       if (socketId === socket.id) {\r\n//         connectedUsers.delete(userId);\r\n//         break;\r\n//       }\r\n//     }\r\n//   });\r\n// });\r\n\r\nio.on(\"connection\", (socket) => {\r\n  const userId = socket.handshake.query.userId;\r\n  const userModel = socket.handshake.query.userModel;\r\n\r\n  // Partie userModel:userId\r\n  if (userId && userModel) {\r\n    const key = `${userModel}:${userId}`;\r\n    userSocketMap[key] = socket.id;\r\n    console.log(\"connected:\", key, socket.id);\r\n    io.emit(\"getOnlineUsers\", Object.keys(userSocketMap)); // Met à jour la liste des utilisateurs en ligne\r\n  }\r\n\r\n  // Partie registerUser classique\r\n  socket.on(\"registerUser\", (userId) => {\r\n    connectedUsers.set(userId, socket.id);\r\n    // console.log(` Utilisateur ${userId} enregistré avec socket ${socket.id}`);\r\n  });\r\n\r\n  socket.on(\"disconnect\", () => {\r\n    console.log(\" Client déconnecté :\", socket.id);\r\n\r\n    // Supprimer dans userSocketMap\r\n    const key = `${userModel}:${userId}`;\r\n    delete userSocketMap[key];\r\n    io.emit(\"getOnlineUsers\", Object.keys(userSocketMap));\r\n\r\n    // Supprimer dans connectedUsers\r\n    for (let [userId, socketId] of connectedUsers.entries()) {\r\n      if (socketId === socket.id) {\r\n        connectedUsers.delete(userId);\r\n        break;\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\napp.use(express.json());\r\n\r\napp.use(cookieParser());\r\napp.use(bodyParser.json({ strict: false }));\r\napp.use(\r\n  cors({\r\n    origin: process.env.url_front,\r\n    credentials: true,\r\n  })\r\n);\r\n\r\napp.use(\"/resource\", express.static(\"resource\"));\r\napp.use(\"/soumission\", express.static(\"soumission\"));\r\n\r\nconst AdminModel = require(\"./models/AdminModel\");\r\n\r\nconst EnseignantRouter = require(\"./routes/Enseignant.routes\");\r\nconst EleveRouter = require(\"./routes/Eleve.routes\");\r\nconst ClasseRouter = require(\"./routes/Classe.routes\");\r\nconst CoursRoutes = require(\"./routes/Cours.routes\");\r\nconst ActiviteRoutes = require(\"./routes/Activite.routes\");\r\nconst SoumissionRoutes = require(\"./routes/Soumission.Routes\");\r\nconst AdminRoutes = require(\"./routes/Admin.Routes\");\r\nconst NotificationRouter = require(\"./routes/Notification.routes\");\r\nconst updateActivitesEtat = require(\"./config/cron\");\r\nconst messageRouter = require(\"./routes/message.routes\");\r\napp.use(\"/api\", [\r\n  AdminRoutes,\r\n  EnseignantRouter,\r\n  EleveRouter,\r\n  ClasseRouter,\r\n  CoursRoutes,\r\n  ActiviteRoutes,\r\n  SoumissionRoutes,\r\n  NotificationRouter,\r\n  messageRouter,\r\n]);\r\n\r\n//create admin if not exist\r\n\r\nconst createAdmin = async () => {\r\n  let findAdmin = await AdminModel.findOne();\r\n  if (!findAdmin) {\r\n    let passe = \"admin@123@\";\r\n    let passwordHash = await bcrypt.hash(passe, 10);\r\n    await AdminModel.createAdmin({\r\n      nom: \"admin\",\r\n      email: \"admin@gmail.com\",\r\n      motDePasse: passwordHash,\r\n    });\r\n  }\r\n};\r\n\r\nconnectDB();\r\ncreateAdmin();\r\n\r\n// si heure == 00:00 lance cron\r\ncron.schedule(\"0 0 * * *\", async () => {\r\n  console.log(\" Cron job lancé...\");\r\n  await updateActivitesEtat();\r\n});\r\n\r\nconst PORT = process.env.PORT || 5000;\r\nserver.listen(PORT, () => console.log(` Server running on port ${PORT}`));\r\nmodule.exports = {\r\n  app,\r\n\r\n  server,\r\n};\r\n"
        }
    ]
}