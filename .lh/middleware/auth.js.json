{
    "sourceFile": "middleware/auth.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748285100677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748285100677,
            "name": "Commit-0",
            "content": "let jwt = require(\"jsonwebtoken\");\r\nlet Eleve = require(\"../models/EleveModel\");\r\nlet Enseignant = require(\"../models/EnseignantModel\");\r\nlet Authentication = {\r\n  authAdmin: async (req, res, next) => {\r\n    try {\r\n      const token = req.cookies.token;\r\n      if (!token) {\r\n        return res.status(200).json({\r\n          message: \"Please Login....!\",\r\n          error: true,\r\n          success: false,\r\n        });\r\n      }\r\n      jwt.verify(\r\n        token,\r\n        process?.env?.ACCESS_TOKEN_SECRET,\r\n        function (err, decoded) {\r\n          if (err) {\r\n            console.log(\"error auth\", err);\r\n          }\r\n\r\n          req.admin = decoded?._id;\r\n          next();\r\n        }\r\n      );\r\n    } catch (error) {\r\n      res.status(400).json({\r\n        message: error.message || error,\r\n        error: true,\r\n        success: false,\r\n      });\r\n    }\r\n  },\r\n\r\n  authEnseignant: async (req, res, next) => {\r\n    try {\r\n      const token = req.cookies.token;\r\n\r\n      if (!token) {\r\n        return res.status(200).json({\r\n          message: \"Please Login....!\",\r\n          error: true,\r\n          success: false,\r\n        });\r\n      }\r\n      jwt.verify(\r\n        token,\r\n        process?.env?.ACCESS_TOKEN_SECRET,\r\n        function (err, decoded) {\r\n          if (err) {\r\n            console.log(\"error auth\", err);\r\n          }\r\n\r\n          req.enseignant = decoded?._id;\r\n          next();\r\n        }\r\n      );\r\n    } catch (error) {\r\n      res.status(400).json({\r\n        message: error.message || error,\r\n        error: true,\r\n        success: false,\r\n      });\r\n    }\r\n  },\r\n\r\n  authEleve: async (req, res, next) => {\r\n    try {\r\n      const token = req.cookies.token;\r\n\r\n      if (!token) {\r\n        return res.status(200).json({\r\n          message: \"Please Login....!\",\r\n          error: true,\r\n          success: false,\r\n        });\r\n      }\r\n      jwt.verify(\r\n        token,\r\n        process?.env?.ACCESS_TOKEN_SECRET,\r\n        function (err, decoded) {\r\n          if (err) {\r\n            console.log(\"error auth\", err);\r\n          }\r\n\r\n          req.eleve = decoded?._id;\r\n          next();\r\n        }\r\n      );\r\n    } catch (error) {\r\n      res.status(400).json({\r\n        message: error.message || error,\r\n        error: true,\r\n        success: false,\r\n      });\r\n    }\r\n  },\r\n\r\n  authSendMessage: async (req, res, next) => {\r\n    const token = req.cookies.token;\r\n    if (!token)\r\n      return res\r\n        .status(401)\r\n        .send({ error: \"Access denied. No token provided.\" });\r\n\r\n    try {\r\n      const payload = jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);\r\n\r\n      if (!payload) {\r\n        return res.status(401).send({ error: \"Unauthorized. Invalid token.\" });\r\n      }\r\n\r\n      // DÃ©tection et chargement de l'utilisateur ou de l'admin\r\n      if (payload.eleveId) {\r\n        const eleve = await Eleve.findById(payload.eleveId).select(\"-password\");\r\n        if (!eleve) return res.status(401).send({ error: \"User not found\" });\r\n\r\n        req.eleve = {\r\n          _id: eleve._id,\r\n        };\r\n      } else if (payload.enseignantId) {\r\n        const enseignant = await Enseignant.findById(\r\n          payload.enseignantId\r\n        ).select(\"-password\");\r\n        if (!enseignant)\r\n          return res.status(401).send({ error: \"Admin not found\" });\r\n\r\n        req.enseignant = {\r\n          _id: enseignant._id,\r\n        };\r\n      } else {\r\n        return res.status(401).send({ error: \"Invalid token payload\" });\r\n      }\r\n\r\n      next();\r\n    } catch (err) {\r\n      console.log(err);\r\n      res.status(400).send({ error: \"Invalid token.\" });\r\n    }\r\n  },\r\n};\r\n\r\nmodule.exports = Authentication;\r\n"
        }
    ]
}