{
    "sourceFile": "controllers/EnseignantCtrl.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1748456742393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748457011100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,9 @@\n       let { idEnseignant } = req.body;\r\n \r\n       let findEnseignant = await Enseignant.findById({\r\n         _id: idEnseignant,\r\n-      }).populate(\"classes\");\r\n+      })\r\n \r\n       res.status({\r\n         result: findEnseignant,\r\n         success: true,\r\n"
                },
                {
                    "date": 1748457037492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,11 +161,11 @@\n       let { idEnseignant } = req.body;\r\n \r\n       let findEnseignant = await Enseignant.findById({\r\n         _id: idEnseignant,\r\n-      });\r\n+      }).populate(\"classes\");\r\n \r\n-      res.status({\r\n+      res.status(200).json({\r\n         result: findEnseignant,\r\n         success: true,\r\n         error: false,\r\n       });\r\n"
                }
            ],
            "date": 1748456742393,
            "name": "Commit-0",
            "content": "const Enseignant = require(\"../models/EnseignantModel\");\r\nconst bcrypt = require(\"bcrypt\");\r\nlet jwt = require(\"jsonwebtoken\");\r\nconst AdminModel = require(\"../models/AdminModel\");\r\nconst EleveModel = require(\"../models/EleveModel\");\r\nconst EnseignantCtrl = {\r\n  login: async (req, res) => {\r\n    try {\r\n      let { email, motDePasse } = req.body;\r\n      let findEnseignant = await Enseignant.findOne({ email }).populate(\r\n        \"classes\"\r\n      );\r\n      if (!findEnseignant)\r\n        return res.status(400).json({ msg: \"email incorrect\" });\r\n\r\n      let compare = await bcrypt.compare(motDePasse, findEnseignant.motDePasse);\r\n      if (!compare)\r\n        return res.status(302).json({ message: \"mot de passe incorrect\" });\r\n\r\n      const tokenData = {\r\n        _id: findEnseignant._id,\r\n        email: findEnseignant.email,\r\n        enseignantId: findEnseignant._id,\r\n      };\r\n\r\n      const token = await jwt.sign(tokenData, process.env.ACCESS_TOKEN_SECRET, {\r\n        expiresIn: 60 * 60 * 2,\r\n      });\r\n\r\n      const tokenOption = {\r\n        httpOnly: true,\r\n        secure: true,\r\n      };\r\n\r\n      res.cookie(\"token\", token, tokenOption).status(200).json({\r\n        message: \"login Success\",\r\n        enseignant: findEnseignant,\r\n        data: token,\r\n        success: true,\r\n        error: false,\r\n      });\r\n    } catch (error) {\r\n      return res\r\n        .status(500)\r\n        .json({ msg: error.message || error, success: false, error: true });\r\n    }\r\n  },\r\n\r\n  AjouterEnseignant: async (req, res) => {\r\n    try {\r\n      const { nom, email, motDePasse, specialite, classes } = req.body;\r\n\r\n      // Vérifier si l'enseignant existe déjà\r\n      const findEnseignant = await Enseignant.findOne({ email });\r\n      if (findEnseignant) {\r\n        return res.status(400).json({ msg: \"Enseignant déjà existe\" });\r\n      }\r\n\r\n      // Vérifier les doublons dans les classes\r\n      const uniqueClasses = [...new Set(classes.map(String))]; // supprime les doublons\r\n\r\n      // Hasher le mot de passe\r\n      const passwordHash = await bcrypt.hash(motDePasse, 10);\r\n\r\n      // Créer l'enseignant avec les classes uniques\r\n      const newEnseignant = await Enseignant.createEnseignant({\r\n        nom,\r\n        email,\r\n        motDePasse: passwordHash,\r\n        specialite,\r\n        classes: uniqueClasses,\r\n      });\r\n\r\n      res.status(200).json({\r\n        msg: \"Enseignant créé avec succès\",\r\n        result: newEnseignant,\r\n        success: true,\r\n        error: false,\r\n      });\r\n    } catch (error) {\r\n      return res\r\n        .status(500)\r\n        .json({ msg: error.message, success: false, error: true });\r\n    }\r\n  },\r\n\r\n  getAllEnseignant: async (req, res) => {\r\n    try {\r\n      const findAdmin = await AdminModel.findById(req.admin);\r\n      if (!findAdmin) return res.status(400).json({ msg: \"Please Login....!\" });\r\n      const enseignants = await Enseignant.find().populate(\"classes\");\r\n\r\n      const grouped = {};\r\n\r\n      enseignants.forEach((enseignant) => {\r\n        enseignant.classes.forEach((classe) => {\r\n          const key = classe._id.toString();\r\n\r\n          if (!grouped[key]) {\r\n            grouped[key] = {\r\n              _id: classe._id,\r\n              nomClasse: classe.nomClasse,\r\n              niveau: classe.niveau,\r\n              enseignants: [],\r\n            };\r\n          }\r\n\r\n          grouped[key].enseignants.push({\r\n            _id: enseignant._id,\r\n            nom: enseignant.nom,\r\n            email: enseignant.email,\r\n            specialite: enseignant.specialite,\r\n          });\r\n        });\r\n      });\r\n\r\n      const result = Object.values(grouped);\r\n\r\n      res.status(200).json({\r\n        result,\r\n        success: true,\r\n        error: false,\r\n      });\r\n    } catch (error) {\r\n      return res\r\n        .status(500)\r\n        .json({ msg: error.message, success: false, error: true });\r\n    }\r\n  },\r\n\r\n  currentEnseignant: async (req, res) => {\r\n    try {\r\n      let findEnseignant = await Enseignant.findById({\r\n        _id: req.enseignant,\r\n      }).populate(\"classes\");\r\n\r\n      res.json({ result: findEnseignant, success: true, error: false });\r\n    } catch (error) {\r\n      return res\r\n        .status(500)\r\n        .json({ msg: error.message, success: false, error: true });\r\n    }\r\n  },\r\n\r\n  getEnseignantSeidBar: async (req, res) => {\r\n    try {\r\n      const findEleve = await EleveModel.findById(req.eleve);\r\n\r\n      if (!findEleve)\r\n        return res.status(500).json({ error: \"Veuillez vous connecter....!\" });\r\n\r\n      const enseignantsFiltrés = await Enseignant.find({\r\n        classes: findEleve.classe,\r\n      }).select(\"nom specialite\");\r\n      res.json({ result: enseignantsFiltrés });\r\n    } catch (error) {}\r\n  },\r\n\r\n  getEnseignantById:async(req,res)=>{\r\n    try {\r\n      let {idEnseignant}=req.body\r\n\r\n      let findEnseignant=await Enseignant.findById({_id:idEnseignant}).populate('classes')\r\n\r\n      res.status({\r\n        result:findEnseignant,\r\n        success: true, error: false\r\n      })\r\n      \r\n    } catch (error) {\r\n       return res\r\n        .status(500)\r\n        .json({ msg: error.message, success: false, error: true });\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = EnseignantCtrl;\r\n"
        }
    ]
}