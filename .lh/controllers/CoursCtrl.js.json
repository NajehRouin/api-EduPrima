{
    "sourceFile": "controllers/CoursCtrl.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1748799085402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748799206570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n const Cours = require(\"../models/CoursModel\");\r\n const EleveModel = require(\"../models/EleveModel\");\r\n const resourceModel = require(\"../models/resourceModel\");\r\n+const { path } = require(\"../models/utilisateur\");\r\n \r\n const CoursCtrl = {\r\n   createCours: async (req, res) => {\r\n     try {\r\n@@ -162,9 +163,14 @@\n   getCoursById: async (req, res) => {\r\n     try {\r\n       const { idCours } = req.body;\r\n       let findCours = await Cours.findById({ _id: idCours }).populate(\r\n-        \"activites\"\r\n+       {\r\n+        path:\"activites\",\r\n+        populate:{\r\n+          path:\"depot\"\r\n+        }\r\n+       }\r\n       );\r\n       res.json({ result: findCours });\r\n     } catch (error) {\r\n       return res\r\n"
                },
                {
                    "date": 1748799589675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n+const activiteModel = require(\"../models/activiteModel\");\r\n const Cours = require(\"../models/CoursModel\");\r\n const EleveModel = require(\"../models/EleveModel\");\r\n const resourceModel = require(\"../models/resourceModel\");\r\n+const SoumissionModel = require(\"../models/SoumissionModel\");\r\n const { path } = require(\"../models/utilisateur\");\r\n \r\n const CoursCtrl = {\r\n   createCours: async (req, res) => {\r\n@@ -176,40 +178,56 @@\n         .json({ msg: error.message, success: false, error: true });\r\n     }\r\n   },\r\n \r\n-  deleteCours: async (req, res) => {\r\n-    try {\r\n-      const { idCours } = req.body;\r\n+ deleteCoursById: async (req, res) => {\r\n+  try {\r\n+    const { idCours } = req.body;\r\n \r\n-      // // Trouver les cours de la classe\r\n-      const cours = await Cours.findById({ _id: idCours });\r\n-      if (cours.resource) {\r\n-        await resourceModel.findByIdAndDelete(cours.resource);\r\n-      }\r\n-      // // Supprimer les ressources et les activitÃ©s liÃ©es Ã  chaque cours\r\n+    // Ã‰tape 1 : Rechercher le cours avec ses activitÃ©s et dÃ©pÃ´ts\r\n+    const findCours = await Cours.findById(idCours).populate({\r\n+      path: \"activites\",\r\n+      populate: {\r\n+        path: \"depot\",\r\n+      },\r\n+    });\r\n \r\n-      // Supprimer les ressources\r\n+    if (!findCours) {\r\n+      return res.status(404).json({ msg: \"Cours non trouvÃ©\", success: false });\r\n+    }\r\n \r\n-      //   // Supprimer les activitÃ©s\r\n-      if (cours.activites && cours.activites.length > 0) {\r\n-        for (const cour of cours) {\r\n-          await activiteModel.deleteMany({ _id: { $in: cour.activites } });\r\n+\r\n+    if (findCours.resource) {\r\n+      await resourceModel.findByIdAndDelete(findCours.resource);\r\n+    }\r\n+\r\n+   \r\n+    if (findCours.activites && findCours.activites.length > 0) {\r\n+      for (const activite of findCours.activites) {\r\n+\r\n+        // Supprimer les dÃ©pÃ´ts associÃ©s Ã  l'activitÃ©\r\n+        if (activite.depot && activite.depot.length > 0) {\r\n+          for (const depot of activite.depot) {\r\n+            await SoumissionModel.findByIdAndDelete(depot._id);\r\n+          }\r\n         }\r\n+        // Supprimer l'activitÃ© elle-mÃªme\r\n+        await activiteModel.findByIdAndDelete(activite._id);\r\n       }\r\n+    }\r\n \r\n-      //   // Supprimer le cours lui-mÃªme\r\n-      await Cours.findByIdAndDelete(cours._id);\r\n-      res.json({\r\n-        message:\r\n-          \"Cours et toutes les donnÃ©es associÃ©es supprimÃ©es avec succÃ¨s.\",\r\n-      });\r\n-    } catch (error) {\r\n-      console.error(\"Erreur lors de la suppression de la classe :\", error);\r\n-      res.status(500).json({\r\n-        error: \"Une erreur est survenue lors de la suppression de la classe.\",\r\n-      });\r\n-    }\r\n-  },\r\n+    // Ã‰tape 4 : Supprimer le cours\r\n+    await Cours.findByIdAndDelete(idCours);\r\n+\r\n+    return res.json({\r\n+      msg: \"Cours et ses donnÃ©es associÃ©es supprimÃ©s avec succÃ¨s\",\r\n+      success: true,\r\n+    });\r\n+  } catch (error) {\r\n+    return res\r\n+      .status(500)\r\n+      .json({ msg: error.message, success: false, error: true });\r\n+  }\r\n+},\r\n };\r\n \r\n module.exports = CoursCtrl;\r\n"
                }
            ],
            "date": 1748799085402,
            "name": "Commit-0",
            "content": "const Cours = require(\"../models/CoursModel\");\r\nconst EleveModel = require(\"../models/EleveModel\");\r\nconst resourceModel = require(\"../models/resourceModel\");\r\n\r\nconst CoursCtrl = {\r\n  createCours: async (req, res) => {\r\n    try {\r\n      let { titre, description, dateCreation, classe } = req.body;\r\n\r\n      let newCours = new Cours({\r\n        enseignantId: req.enseignant,\r\n        titre,\r\n        description,\r\n        dateCreation,\r\n        classe,\r\n      });\r\n      await newCours.save();\r\n\r\n      res.status(200).json({\r\n        result: newCours,\r\n        msg: \"Cour crÃ©Ã© avec succÃ¨s \",\r\n        success: true,\r\n        error: false,\r\n      });\r\n    } catch (error) {\r\n      return res\r\n        .status(500)\r\n        .json({ msg: error.message, success: false, error: true });\r\n    }\r\n  },\r\n\r\n  getCoursEnseignant: async (req, res) => {\r\n    try {\r\n      // Trouver les cours associÃ©s Ã  l'enseignant\r\n      let findCours = await Cours.find({\r\n        enseignantId: req.enseignant,\r\n      })\r\n        .populate(\"classe\") // Charger la classe liÃ©e au cours\r\n        .populate(\"resource\") // Charger la ressource liÃ©e au cours\r\n        .populate(\"activites\"); // Charger les activitÃ©s liÃ©es au cours\r\n\r\n      // Regrouper les cours par nomClasse et niveau\r\n      const classesGroupÃ©es = findCours.reduce((acc, cours) => {\r\n        const { nomClasse, niveau, _id } = cours.classe;\r\n        const {\r\n          _id: coursId, // ID du cours\r\n          titre,\r\n          description,\r\n          dateCreation,\r\n          resource,\r\n          activites,\r\n        } = cours;\r\n\r\n        // Si la classe n'existe pas encore dans l'objet accumulÃ©, la crÃ©er\r\n        if (\r\n          !acc.some(\r\n            (classe) =>\r\n              classe.nomClasse === nomClasse && classe.niveau === niveau\r\n          )\r\n        ) {\r\n          acc.push({\r\n            nomClasse,\r\n            niveau,\r\n            _id,\r\n            cours: [], // Liste des cours pour cette classe\r\n          });\r\n        }\r\n\r\n        // Ajouter les dÃ©tails du cours Ã  la classe correspondante\r\n        const classeIndex = acc.findIndex(\r\n          (classe) => classe.nomClasse === nomClasse && classe.niveau === niveau\r\n        );\r\n\r\n        if (classeIndex !== -1) {\r\n          acc[classeIndex].cours.push({\r\n            _id: coursId, // Ajout de l'ID du cours ici\r\n            titre,\r\n            description,\r\n            dateCreation,\r\n            resource,\r\n            activites,\r\n          });\r\n        }\r\n\r\n        return acc;\r\n      }, []);\r\n\r\n      // Retourner les cours regroupÃ©s par classe avec les dÃ©tails de chaque cours\r\n      res.status(200).json({\r\n        result: classesGroupÃ©es,\r\n        success: true,\r\n        error: false,\r\n      });\r\n    } catch (error) {\r\n      return res\r\n        .status(500)\r\n        .json({ msg: error.message, success: false, error: true });\r\n    }\r\n  },\r\n\r\n  getActivitesbyCours: async (req, res) => {\r\n    try {\r\n      const { idCours } = req.body;\r\n      let findCours = await Cours.findById({ _id: idCours }).populate(\r\n        \"activites\"\r\n      );\r\n      res.json({ result: findCours.activites });\r\n    } catch (error) {\r\n      return res\r\n        .status(500)\r\n        .json({ msg: error.message, success: false, error: true });\r\n    }\r\n  },\r\n\r\n  listOfCoursByEleve: async (req, res) => {\r\n    try {\r\n      const findEleve = await EleveModel.findById(req.eleve);\r\n      if (!findEleve) return res.status(400).json({ msg: \"Please Login....!\" });\r\n\r\n      const findCours = await Cours.find({ classe: findEleve.classe })\r\n        .populate(\"enseignantId\", \"nom email specialite\")\r\n        .populate(\"resource\")\r\n        .populate({\r\n          path: \"activites\",\r\n          populate: {\r\n            path: \"depot\",\r\n            populate: {\r\n              path: \"idEleve\",\r\n              select: \"nom email classe\", // ou tout ce que tu veux garder\r\n            },\r\n          },\r\n        });\r\n\r\n      // ðŸ’¡ Filtrer les dÃ©pÃ´ts par Ã©lÃ¨ve dans chaque activitÃ©\r\n      const coursFiltres = findCours.map((cours) => {\r\n        const activitesFiltrees = cours.activites.map((activite) => {\r\n          const depotsFiltres = activite.depot.filter(\r\n            (depot) => depot?.idEleve?._id.toString() === req.eleve\r\n          );\r\n          return {\r\n            ...activite.toObject(),\r\n            depot: depotsFiltres,\r\n          };\r\n        });\r\n\r\n        return {\r\n          ...cours.toObject(),\r\n          activites: activitesFiltrees,\r\n        };\r\n      });\r\n\r\n      res.status(200).json({\r\n        result: coursFiltres,\r\n        success: true,\r\n        error: false,\r\n      });\r\n    } catch (error) {\r\n      res.status(500).json({ msg: error.message, success: false, error: true });\r\n    }\r\n  },\r\n\r\n\r\n  getCoursById:async(req,res)=>{\r\n    try {\r\n       const { idCours } = req.body;\r\n         let findCours = await Cours.findById({ _id: idCours }).populate(\r\n        \"activites\"\r\n      );\r\n            res.json({ result: findCours });\r\n    }  catch (error) {\r\n      return res\r\n        .status(500)\r\n        .json({ msg: error.message, success: false, error: true });\r\n    }\r\n  },\r\n\r\n deleteCours: async (req, res) => {\r\n      try {\r\n        const { idCours } = req.body;\r\n  \r\n        // // Trouver les cours de la classe\r\n        const cours = await Cours.findById({ _id: idCours });\r\n     if (cours.resource) {\r\n            await resourceModel.findByIdAndDelete(cours.resource);\r\n          }\r\n        // // Supprimer les ressources et les activitÃ©s liÃ©es Ã  chaque cours\r\n  \r\n          // Supprimer les ressources\r\n       \r\n  \r\n          //   // Supprimer les activitÃ©s\r\n          if (cours.activites && cours.activites.length > 0) {\r\n                  for (const cour of cours) {\r\n            await activiteModel.deleteMany({ _id: { $in: cour.activites } });\r\n                  }\r\n\r\n          }\r\n  \r\n         \r\n       \r\n   //   // Supprimer le cours lui-mÃªme\r\n          await Cours.findByIdAndDelete(cours._id);\r\n        res.json({\r\n          message:\r\n            \"Cours et toutes les donnÃ©es associÃ©es supprimÃ©es avec succÃ¨s.\",\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la suppression de la classe :\", error);\r\n        res.status(500).json({\r\n          error: \"Une erreur est survenue lors de la suppression de la classe.\",\r\n        });\r\n      }\r\n    },\r\n};\r\n\r\nmodule.exports = CoursCtrl;\r\n"
        }
    ]
}